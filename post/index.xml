<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Evan Edmond</title>
    <link>https://Craskermasker.github.io/post/</link>
      <atom:link href="https://Craskermasker.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 26 Apr 2022 14:25:58 +0100</lastBuildDate>
    <image>
      <url>https://Craskermasker.github.io/images/icon_hu52c3432a9714b9dff44576768deb52e5_42693_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://Craskermasker.github.io/post/</link>
    </image>
    
    <item>
      <title>Converting Datasets with file_tree - Work in Progress</title>
      <link>https://Craskermasker.github.io/post/converting-datasets-filetree-wip/</link>
      <pubDate>Tue, 26 Apr 2022 14:25:58 +0100</pubDate>
      <guid>https://Craskermasker.github.io/post/converting-datasets-filetree-wip/</guid>
      <description>&lt;p&gt;Converting the structure of structured imaging datasets is tricky.
I had to do this for a consolidated analysis and  have found the file_tree module took much of the hassle out.
Work is in progress on incorporating this functionality in the module itself. In the meantime I have put a minimum working example here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/evan.edmond/filetree-convert-demo&#34;&gt;https://gitlab.com/evan.edmond/filetree-convert-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I found this particularly useful to converge several different datasets into a common 
&lt;a href=&#34;https://bids-specification.readthedocs.io/en/stable/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BIDS&lt;/a&gt; space.&lt;/p&gt;
&lt;p&gt;This became as simple as writing a text file describing the structure of each dataset and the eventual desired target.&lt;/p&gt;
&lt;p&gt;dataset 1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HV_{participant} (subj_dir)
  F3T_NNNN_NNN_{scancode} (scan_dir)
    images_{image_n}_boldmbep2d2mmMB6v2RS.nii.gz (func_data_unclassified)
    images_{image_n}_t1mprax1mmisowithNose32ch1001.nii.gz (T1w_unclassified)
    sbref.nii.gz (func_sbref)
    funcdata.nii.gz (func_data)
    T1w.nii.gz (T1w)
  twix_symlinks
    slsr_csi_mcycle_dw_{block_n}.dat (mrsi_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dataset 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;raw_data
  C{participant} (subj_dir)
    T1.nii.gz (T1w)
    CSI
      slsr_csi_mcycle_dw_{block_n}.dat (mrsi_data)
    T1_dcm (T1w_dicom_dir)
    rest
      images_{image_n}_MB8FMRIfov21024mmresting.nii.gz (func_data_unclassified)
      sbref.nii.gz (func_sbref)
      funcdata.nii.gz (func_data)
      fmap_rest
        images_{image_n}_fieldmapgre2mmFoV216mm1001.nii.gz (fmap_mag)
        images_{image_n}_fieldmapgre2mmFoV216mm2001.nii.gz (fmap_phase)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dataset 3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;raw
  sub-{participant} (subj_dir)
    ses-placebo (ses_dir)
      anat
        sub-{participant}_ses-p_T1w.nii.gz (T1w)
      fmap
        sub-{participant}_ses-p_magnitude1.nii.gz (fmap_mag)
        sub-{participant}_ses-p_phasediff1.nii.gz (fmap_phase)
      func
        sub-{participant}_ses-p_task-{task}_bold.nii.gz (func_data)
        sub-{participant}_ses-p_task-{task}_sbref.nii.gz (func_sbref)
      mrsi
        sub-{participant}_ses-p_slsr_csi_mcycle_pre_{block_n}.dat (mrsi_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Despite a range of different originating formats, it was relatively straightforward to move towards a common structure for further analyses.&lt;/p&gt;
&lt;p&gt;The specific implementation is a work in progress, but as an &lt;strong&gt;approach&lt;/strong&gt; this had the benefit of clarity, portability, and flexibility.&lt;/p&gt;
&lt;p&gt;target dataset structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rawdata
 sub-{participant} (input_subj_dir)
    anat (input_anat_dir)
      sub-{participant}_T1w.nii.gz (T1w)
      sub-{participant}_T1w_mask.nii.gz (hand_area)
      sub-{participant}_T1w_dicom (T1w_dicom_dir)
    fmap (input_fmap_dir)
      sub-{participant}_magnitude1.nii.gz (fmap_mag)
      sub-{participant}_phasediff1.nii.gz (fmap_phase)
    func (input_func_dir)
      sub-{participant}_task-{task}_bold.nii.gz (func_data)
      sub-{participant}_task-{task}_sbref.nii.gz (func_sbref)
    mrsi (input_mrsi_dir)
      sub-{participant}_vox-m1_csi_slaser_{block_n}.dat (mrsi_data)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://Craskermasker.github.io/post/hello-world/</link>
      <pubDate>Tue, 30 Jun 2020 18:42:17 +0100</pubDate>
      <guid>https://Craskermasker.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;This was surprisingly easy to set up! The guide to getting started here is excellent:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/&#34;&gt;https://sourcethemes.com/academic/docs/install/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deployment is done using Github Pages, and I got a custom domain name for this - setting up DNS forwarding was the most difficult part but worked on following the guide here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@hossainkhan/using-custom-domain-for-github-pages-86b303d3918a&#34;&gt;https://medium.com/@hossainkhan/using-custom-domain-for-github-pages-86b303d3918a&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
